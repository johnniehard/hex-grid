var app=function(){"use strict";function t(){}function n(t){return t()}function e(){return Object.create(null)}function r(t){t.forEach(n)}function i(t){return"function"==typeof t}function o(t,n){return t!=t?n==n:t!==n||t&&"object"==typeof t||"function"==typeof t}function s(t,n,e,r){return t[1]&&r?function(t,n){for(const e in n)t[e]=n[e];return t}(e.ctx.slice(),t[1](r(n))):e.ctx}function u(t){return null==t?"":t}function c(t,n){t.appendChild(n)}function a(t,n,e){t.insertBefore(n,e||null)}function f(t){t.parentNode.removeChild(t)}function l(t){return document.createElement(t)}function h(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function d(t){return document.createTextNode(t)}function p(){return d(" ")}function x(t,n,e,r){return t.addEventListener(n,e,r),()=>t.removeEventListener(n,e,r)}function g(t,n,e){null==e?t.removeAttribute(n):t.getAttribute(n)!==e&&t.setAttribute(n,e)}let y;function $(t){y=t}function m(t,n){const e=t.$$.callbacks[n.type];e&&e.slice().forEach((t=>t.call(this,n)))}const b=[],w=[],q=[],P=[],v=Promise.resolve();let O=!1;function H(t){q.push(t)}const E=new Set;let j=0;function M(){const t=y;do{for(;j<b.length;){const t=b[j];j++,$(t),C(t.$$)}for($(null),b.length=0,j=0;w.length;)w.pop()();for(let t=0;t<q.length;t+=1){const n=q[t];E.has(n)||(E.add(n),n())}q.length=0}while(b.length);for(;P.length;)P.pop()();O=!1,E.clear(),$(t)}function C(t){if(null!==t.fragment){t.update(),r(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(H)}}const N=new Set;let S;function _(t,n){t&&t.i&&(N.delete(t),t.i(n))}function R(t,n,e,r){if(t&&t.o){if(N.has(t))return;N.add(t),S.c.push((()=>{N.delete(t),r&&(e&&t.d(1),r())})),t.o(n)}}function k(t){t&&t.c()}function T(t,e,o,s){const{fragment:u,on_mount:c,on_destroy:a,after_update:f}=t.$$;u&&u.m(e,o),s||H((()=>{const e=c.map(n).filter(i);a?a.push(...e):r(e),t.$$.on_mount=[]})),f.forEach(H)}function D(t,n){const e=t.$$;null!==e.fragment&&(r(e.on_destroy),e.fragment&&e.fragment.d(n),e.on_destroy=e.fragment=null,e.ctx=[])}function G(t,n){-1===t.$$.dirty[0]&&(b.push(t),O||(O=!0,v.then(M)),t.$$.dirty.fill(0)),t.$$.dirty[n/31|0]|=1<<n%31}function z(n,i,o,s,u,c,a,l=[-1]){const h=y;$(n);const d=n.$$={fragment:null,ctx:null,props:c,update:t,not_equal:u,bound:e(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(i.context||(h?h.$$.context:[])),callbacks:e(),dirty:l,skip_bound:!1,root:i.target||h.$$.root};a&&a(d.root);let p=!1;if(d.ctx=o?o(n,i.props||{},((t,e,...r)=>{const i=r.length?r[0]:e;return d.ctx&&u(d.ctx[t],d.ctx[t]=i)&&(!d.skip_bound&&d.bound[t]&&d.bound[t](i),p&&G(n,t)),e})):[],d.update(),p=!0,r(d.before_update),d.fragment=!!s&&s(d.ctx),i.target){if(i.hydrate){const t=function(t){return Array.from(t.childNodes)}(i.target);d.fragment&&d.fragment.l(t),t.forEach(f)}else d.fragment&&d.fragment.c();i.intro&&_(n.$$.fragment),T(n,i.target,i.anchor,i.customElement),M()}$(h)}class V{$destroy(){D(this,1),this.$destroy=t}$on(t,n){const e=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return e.push(n),()=>{const t=e.indexOf(n);-1!==t&&e.splice(t,1)}}$set(t){var n;this.$$set&&(n=t,0!==Object.keys(n).length)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function W(t){let n,e,r,i,o;const u=t[3].default,c=function(t,n,e,r){if(t){const i=s(t,n,e,r);return t[0](i)}}(u,t,t[2],null);return{c(){n=h("svg"),c&&c.c(),g(n,"width",e=`${t[0]}px`),g(n,"height",r=`${t[1]}px`),g(n,"viewBox",i=`0 0 ${t[0]} ${t[1]}`),g(n,"class","svelte-1yy3ljk")},m(t,e){a(t,n,e),c&&c.m(n,null),o=!0},p(t,[a]){c&&c.p&&(!o||4&a)&&function(t,n,e,r,i,o){if(i){const u=s(n,e,r,o);t.p(u,i)}}(c,u,t,t[2],o?function(t,n,e,r){if(t[2]&&r){const i=t[2](r(e));if(void 0===n.dirty)return i;if("object"==typeof i){const t=[],e=Math.max(n.dirty.length,i.length);for(let r=0;r<e;r+=1)t[r]=n.dirty[r]|i[r];return t}return n.dirty|i}return n.dirty}(u,t[2],a,null):function(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let t=0;t<e;t++)n[t]=-1;return n}return-1}(t[2]),null),(!o||1&a&&e!==(e=`${t[0]}px`))&&g(n,"width",e),(!o||2&a&&r!==(r=`${t[1]}px`))&&g(n,"height",r),(!o||3&a&&i!==(i=`0 0 ${t[0]} ${t[1]}`))&&g(n,"viewBox",i)},i(t){o||(_(c,t),o=!0)},o(t){R(c,t),o=!1},d(t){t&&f(n),c&&c.d(t)}}}function A(t,n,e){let{$$slots:r={},$$scope:i}=n,{width:o}=n,{height:s}=n;return t.$$set=t=>{"width"in t&&e(0,o=t.width),"height"in t&&e(1,s=t.height),"$$scope"in t&&e(2,i=t.$$scope)},[o,s,i,r]}class I extends V{constructor(t){super(),z(this,t,A,W,o,{width:0,height:1})}}var B=function(t,n){return function(t,n){
/*! axis.js v1.2.1 | (c) 2016 @toddmotto | https://github.com/toddmotto/axis */
t.exports=function(){var t={},n="Array Object String Date RegExp Function Boolean Number Null Undefined".split(" ");function e(){return Object.prototype.toString.call(this).slice(8,-1)}for(var r=n.length;r--;)t["is"+n[r]]=function(t){return function(n){return e.call(n)===t}}(n[r]);return t}()}(n={exports:{}}),n.exports}(),L=B.isObject,X=B.isNumber,Y=B.isArray,F=B.isString;function U(t,n){return n+t*(1&n)>>1}function J(t,n){return(t%n+n)%n}function K(t,n){if(!/^(N|S)?(E|W)?$/i.test(t))throw new Error(`Invalid compass direction: ${t}. Choose from E, SE, S, SW, W, NW, N or NE.`);if(n=n.toLowerCase(),t=t.toUpperCase(),"pointy"===n&&["N","S"].includes(t))throw new Error(`Direction ${t} is ambiguous for pointy hexes. Did you mean ${t}E or ${t}W?`);if("flat"===n&&["E","W"].includes(t))throw new Error(`Direction ${t} is ambiguous for flat hexes. Did you mean N${t} or S${t}?`);return{pointy:{E:0,SE:1,SW:2,W:3,NW:4,NE:5},flat:{SE:0,S:1,SW:2,NW:3,N:4,NE:5}}[n][t]}function Q(t,n){return X(t)||X(n)?X(t)?X(n)||(n=t):t=n:t=n=0,{x:t,y:n}}const Z=[{q:1,r:0,s:-1},{q:0,r:1,s:-1},{q:-1,r:1,s:0},{q:-1,r:0,s:1},{q:0,r:-1,s:1},{q:1,r:-1,s:0}],tt=[{q:2,r:-1,s:-1},{q:1,r:1,s:-2},{q:-1,r:2,s:-1},{q:-2,r:1,s:1},{q:-1,r:-1,s:2},{q:1,r:-2,s:1}],nt={q:1e-6,r:1e-6,s:-2e-6};function et(t){return X(t)?this[t]:this[this.indexOf(t)]}function rt({isValidHex:t}){return function(n,e){if(!t(e))return this;const r=X(n)?n:this.indexOf(n);return r<0?this.push(e):this[r]=e,this}}function it(t,n){const e=t.distance(n),r=1/Math.max(e,1);let i=[];for(let o=0;o<=e;o++){const e=t.nudge().lerp(n.nudge(),r*o).round();i.push(this.get(e))}return i}function ot({isValidHex:t}){return function(n,e=0,r=!0){if(!t(n))throw new Error(`Invalid center hex: ${n}.`);if(!this.get(n))throw new Error(`Center hex with coordinates ${n} not present in grid.`);let i=[];for(let t=-e;t<=e;t++)for(let o=Math.max(-e,-t-e);o<=Math.min(e,-t+e);o++){const e=this.get(n.cubeToCartesian({q:n.q+t,r:n.r+o}));n.equals(e)&&!r||i.push(e)}return i.filter(Boolean)}}function st({isValidHex:t,signedModulo:n,compassToNumberDirection:e}){return function(r,i="all",o=!1){if(!t(r))throw new Error(`Invalid hex: ${r}.`);const s=o?tt:Z;return"all"===i&&(i=[0,1,2,3,4,5]),[].concat(i).map((t=>{F(t)&&(t=e(t,r.orientation)),(t<0||t>5)&&(t=n(t,6));const{q:i,r:o}=s[t];return this.get(r.cubeToCartesian({q:r.q+i,r:r.r+o}))}))}}function ut(){if(0===this.length)return 0;const{0:t,length:n,[n-1]:e}=this[0].isPointy()?[...this].sort(((t,n)=>n.s-t.s||t.q-n.q)):[...this].sort(((t,n)=>t.q-n.q));return e.toPoint().x-t.toPoint().x+this[0].width()}function ct(){if(0===this.length)return 0;const{0:t,length:n,[n-1]:e}=this[0].isPointy()?[...this].sort(((t,n)=>t.r-n.r)):[...this].sort(((t,n)=>n.s-t.s||t.r-n.r));return e.toPoint().y-t.toPoint().y+this[0].height()}function at({Hex:t}){return function(n,e){return t().fromPoint(n,e)}}function ft({Grid:t,Hex:n}){return function({width:e,height:r,start:i,direction:o=1,onCreate:s=(()=>{})}){i=n(i);const[u,c,a]={1:["q","r","s"],3:["r","s","q"],5:["s","q","r"]}[o],f=new t;f.width=e,f.height=r,f.start=i,f.direction=o;for(let t=0;t<e;t++)for(let e=0;e<r;e++){const r=n({[u]:t+i[u],[c]:e+i[c],[a]:-t-e+i[a]});s(r,f),f.push(r)}return f}}function lt({Grid:t,Hex:n}){return function({size:e,start:r,direction:i=1,onCreate:o=(()=>{})}){r=n(r);const s={1:{rStart:()=>0,rEnd:t=>e-t},5:{rStart:t=>e-t,rEnd:()=>e+1}},{rStart:u,rEnd:c}=s[i],a=new t;a.size=e,a.start=r,a.direction=i;for(let t=0;t<e;t++)for(let e=u(t);e<c(t);e++){const i=n({q:t+r.q,r:e+r.r,s:-t-e+r.s});o(i,a),a.push(i)}return a}}function ht({Grid:t,Hex:n}){return function({radius:e,center:r,onCreate:i=(()=>{})}){r=n(r);const o=new t;o.radius=e,o.center=r;for(let t=-e;t<=e;t++){const s=Math.max(-e,-t-e),u=Math.min(e,-t+e);for(let e=s;e<=u;e++){const s=n({q:t+r.q,r:e+r.r,s:-t-e+r.s});i(s,o),o.push(s)}}return o}}function dt({Grid:t,Hex:n,compassToNumberDirection:e,signedModulo:r}){return function({width:i,height:o,start:s,direction:u=(n().isPointy()?0:1),onCreate:c=(()=>{})}){s=n(s),F(u)&&(u=e(u,s.orientation)),(u<0||u>5)&&(u=r(u,6));const[a,f,l]=[["q","r","s"],["r","q","s"],["r","s","q"],["s","r","q"],["s","q","r"],["q","s","r"]][u],[h,d]=s.isPointy()?[i,o]:[o,i],p=new t;p.width=i,p.height=o,p.start=s,p.direction=u;for(let t=0;t<d;t++){const e=U(s.offset,t);for(let r=-e;r<h-e;r++){const e=n({[a]:r+s[a],[f]:t+s[f],[l]:-r-t+s[l]});c(e,p),p.push(e)}}return p}}function pt({Grid:t,Hex:n}){return function({radius:e,center:r,onCreate:i=(()=>{})}){r=n(r);const o=new t;o.radius=e,o.center=r;const{q:s,r:u,s:c}=r;let a=n({q:s,r:u-e,s:c+e});for(let t=0;t<6;t++)for(let r=0;r<e;r++){i(a,o),o.push(a);const{q:e,r:r,s:s}=Z[t];a=n({q:a.q+e,r:a.r+r,s:a.s+s})}return o}}function xt({Grid:t,Hex:n}){return function({radius:e,center:r,onCreate:i=(()=>{})}){r=n(r);let o=new t;i(r,o),o.push(r);for(let t=1;t<=e;t++)o=o.concat(this.ring({radius:t,center:r,onCreate:i}));return o.radius=e,o.center=r,o}}function gt({Point:t}){return function(n,e){let r;return({x:r,y:e}=t(n,e)),t(this.x+r,this.y+e)}}function yt({Point:t}){return function(n,e){let r;return({x:r,y:e}=t(n,e)),t(this.x-r,this.y-e)}}function $t({Point:t}){return function(n,e){let r;return({x:r,y:e}=t(n,e)),t(this.x*r,this.y*e)}}function mt({Point:t}){return function(n,e){let r;return({x:r,y:e}=t(n,e)),t(this.x/r,this.y/e)}}function bt({ensureXY:t}){const n={add:gt({Point:e}),subtract:yt({Point:e}),multiply:$t({Point:e}),divide:mt({Point:e})};function e(e,r){let i;return i=X(e)?t(e,r):Y(e)?t(...e):L(e)?t(e.x,e.y):t(0),Object.assign(Object.create(n),i)}return e}const wt=bt({ensureXY:Q});class qt extends Array{static isValidHex(t){return!0===(t||{}).__isHoneycombHex}fill(){throw new TypeError("Grid.prototype.fill is not implemented")}includes(t,n=0){return!!(this.indexOf(t,n)+1)}indexOf(t,n=0){const{length:e}=this;let r=Number(n);for(t=wt(t),r=Math.max(r>=0?r:e+r,0);r<e;r++)if(this[r].equals(t))return r;return-1}lastIndexOf(t,n=this.length-1){const{length:e}=this;let r=Number(n);for(t=wt(t),r=r>=0?Math.min(r,e-1):e+r;r>=0;r--)if(this[r].equals(t))return r;return-1}push(...t){return super.push(...t.filter(qt.isValidHex))}splice(t,n,...e){return null==n?super.splice(t):super.splice(t,n,...e.filter(qt.isValidHex))}unshift(...t){return super.unshift(...t.filter(qt.isValidHex))}}function Pt(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function vt(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function Ot(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?vt(Object(e),!0).forEach((function(n){Pt(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):vt(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function Ht({Hex:t}){return function(...n){return Object.assign(this,t(...n))}}function Et(){return{x:this.x,y:this.y}}function jt(){return{q:this.q,r:this.r,s:this.s}}function Mt({q:t,r:n}){let e,r;return this.isPointy()?(e=t+U(this.offset,n),r=n):(e=t,r=n+U(this.offset,t)),{x:e,y:r}}function Ct(){return"pointy"===this.orientation.toLowerCase()}function Nt(){return"flat"===this.orientation.toLowerCase()}function St(){const{xRadius:t}=this.size;return this.isPointy()?t*Math.sqrt(3):2*t}function _t(){const{yRadius:t}=this.size;return this.isPointy()?2*t:t*Math.sqrt(3)}function Rt({Point:t}){return function(){const n=this.width(),e=this.height(),{x:r,y:i}=this.origin;return this.isPointy()?[t(n-r,.25*e-i),t(n-r,.75*e-i),t(.5*n-r,e-i),t(0-r,.75*e-i),t(0-r,.25*e-i),t(.5*n-r,0-i)]:[t(n-r,.5*e-i),t(.75*n-r,e-i),t(.25*n-r,e-i),t(0-r,.5*e-i),t(.25*n-r,0-i),t(.75*n-r,0-i)]}}function kt({Point:t}){return function(){const{x:n,y:e}=this.origin;return t(this.width()/2-n,this.height()/2-e)}}function Tt({Point:t}){return function(){const{q:n,r:e,size:r}=this,{xRadius:i,yRadius:o}=r;let s,u;return this.isPointy()?(s=i*Math.sqrt(3)*(n+e/2),u=3*o/2*e):(s=3*i/2*n,u=o*Math.sqrt(3)*(e+n/2)),t(s,u)}}function Dt({Point:t,Hex:n}){return function(e,r){const{xRadius:i,yRadius:o}=this.size;let s,u,c;return({x:s,y:r}=t(e,r).subtract(this.center())),this.isPointy()?(u=Math.sqrt(3)*s/(3*i)-r/(3*o),c=2/3*(r/o)):(u=2/3*(s/i),c=Math.sqrt(3)*r/(3*o)-s/(3*i)),n({q:u,r:c,s:-u-c}).round()}}function Gt({Hex:t,Point:n}){return function(e){const{x:r,y:i}=n(e);return t(this.x+r,this.y+i,Ot({},this))}}function zt({Hex:t,Point:n}){return function(e){const{x:r,y:i}=n(e);return t(this.x-r,this.y-i,Ot({},this))}}function Vt({Point:t}){return function(n){if(null!=n&&(Y(n)||X(n.x)&&X(n.y))){const{x:e,y:r}=t(n);return this.x===e&&this.y===r}return!1}}function Wt(t){return Math.max(Math.abs(this.q-t.q),Math.abs(this.r-t.r),Math.abs(this.s-t.s))}function At({Hex:t}){return function(){let{q:n,r:e,s:r}=this,i=Math.round(n),o=Math.round(e),s=Math.round(r);const u=Math.abs(n-i),c=Math.abs(e-o),a=Math.abs(r-s);return u>c&&u>a?i=-o-s:c>a?o=-i-s:s=-i-o,t(Ot(Ot({},this),{},{q:i,r:o,s:s}))}}function It({Hex:t}){return function(n,e){const r=this.q*(1-e)+n.q*e,i=this.r*(1-e)+n.r*e;return t(Ot(Ot({},this),{},{q:r,r:i,s:-r-i}))}}function Bt({Hex:t}){return function(){const{q:n,r:e,s:r}=nt;return t(Ot(Ot({},this),{},{q:this.q+n,r:this.r+e,s:this.s+r}))}}function Lt(){return`${this.x},${this.y}`}const Xt={thirdCoordinate:function(t,n){return-t-n}},Yt=bt({ensureXY:Q}),Ft=function({ensureXY:t,normalizeRadiuses:n,Point:e}){return function(r={}){const i=function({Point:t}){return function(n,e){let r,i,o;return({x:r,y:e}=t(n,e)),this.isPointy()?(i=r-U(this.offset,e),o=e):(i=r,o=e-U(this.offset,r)),{q:i,r:o,s:-i-o}}}({Point:e}),o={__isHoneycombHex:!0,orientation:"pointy",origin:0,size:{xRadius:1,yRadius:1},offset:-1,get q(){return this.cartesianToCube(this).q},get r(){return this.cartesianToCube(this).r},get s(){return this.cartesianToCube(this).s},add:Gt({Hex:u,Point:e}),cartesian:Et,cartesianToCube:i,center:kt({Point:e}),coordinates:Et,corners:Rt({Point:e}),cube:jt,cubeToCartesian:Mt,distance:Wt,equals:Vt({Point:e}),fromPoint:Dt({Point:e,Hex:u}),height:_t,isFlat:Nt,isPointy:Ct,lerp:It({Hex:u}),nudge:Bt({Hex:u}),round:At({Hex:u}),set:Ht({Hex:u}),subtract:zt({Hex:u,Point:e}),toCartesian:Mt,toCube:i,toPoint:Tt({Point:e}),toString:Lt,width:St},s=Object.assign(o,r);function u(n,e,r={}){let i;if(L(n)){let{q:t,r:o,s:u}=n,c=function(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}(n,["q","r","s"]);if(X(t)||X(o)||X(u)){const n=t+o+u;if(Number.isNaN(n)||n>1e-12)throw new Error(`Cube coordinates must have a sum of 0. q: ${t}, r: ${o}, s: ${u}, sum: ${t+o+u}.`);({x:i,y:e}=s.cubeToCartesian({q:t,r:o,s:u}))}else({x:i,y:e}=n);r=c}else Y(n)?([i,e]=n,r={}):i=n;return Object.assign(Object.create(s),Object.assign(r,t(i,e)))}return s.size=n(s.size,s.isPointy()),s.origin=e(s.origin),Object.assign(u,Xt,{toJSON:()=>r}),u}}({ensureXY:Q,normalizeRadiuses:function(t,n){if(L(t)){if(X(t.xRadius)&&X(t.yRadius))return t;const{width:e,height:r}=t;if(X(e)&&X(r))return n?{xRadius:e/Math.sqrt(3),yRadius:r/2}:{xRadius:e/2,yRadius:r/Math.sqrt(3)}}if(X(t))return{xRadius:t,yRadius:t};throw new Error(`Invalid size: ${t}. Set it as a number or as an object containing width and height.`)},Point:Yt}),Ut=function({extendHex:t,Grid:n,Point:e}){const{isValidHex:r}=n;return function(i=t()){function o(...t){return t=t.filter(Boolean),Y(t[0])&&(0===t[0].length||t[0].some((t=>!X(t))))&&(t=t[0]),new n(...t.map((t=>i(t))))}return Object.assign(o,{Hex:i,isValidHex:r,pointToHex:at({Point:e,Hex:i}),parallelogram:ft({Grid:n,Hex:i}),triangle:lt({Grid:n,Hex:i}),hexagon:ht({Grid:n,Hex:i}),rectangle:dt({Grid:n,Hex:i,compassToNumberDirection:K,signedModulo:J}),ring:pt({Grid:n,Hex:i}),spiral:xt({Grid:n,Hex:i})}),Object.assign(n.prototype,{get:et,hexesBetween:it,hexesInRange:ot({isValidHex:r}),neighborsOf:st({isValidHex:r,signedModulo:J,compassToNumberDirection:K}),pointHeight:ct,pointWidth:ut,set:rt({isValidHex:r})}),o}}({extendHex:Ft,Grid:qt,Point:Yt});function Jt(t,n){const e=(t=>Ft({size:t,orientation:"flat",alive:!1,neighbors:[]}))(t);return Ut(e).hexagon({radius:n})}function Kt(n){let e,i,o,s;return{c(){e=h("path"),g(e,"d",n[1]),g(e,"class",i=u(n[0])+" svelte-b38lx1")},m(t,r){a(t,e,r),o||(s=[x(e,"click",n[7]),x(e,"mouseenter",n[8])],o=!0)},p(t,[n]){1&n&&i!==(i=u(t[0])+" svelte-b38lx1")&&g(e,"class",i)},i:t,o:t,d(t){t&&f(e),o=!1,r(s)}}}function Qt(t,n,e){let r,{x:i}=n,{y:o}=n,{r:s}=n,{showOutline:u=!1}=n,{active:c=!1}=n;const a=function(t,n,e){const r=[];for(let i=0;i<6;i+=2*Math.PI/6)r.push([t+Math.cos(i)*e,n+Math.sin(i)*e]);return r}(i,o,s),f=function(t,n=!0){let e="";return t.forEach(((t,n)=>{0===n&&(e+=`M ${t[0]} ${t[1]} `),e+=`L ${t[0]} ${t[1]} `})),n&&(e+=`L ${t[0][0]} ${t[0][1]} `),e}(a);return t.$$set=t=>{"x"in t&&e(2,i=t.x),"y"in t&&e(3,o=t.y),"r"in t&&e(4,s=t.r),"showOutline"in t&&e(5,u=t.showOutline),"active"in t&&e(6,c=t.active)},t.$$.update=()=>{96&t.$$.dirty&&e(0,r=`${u&&"outline"} ${c&&"active"}`)},[r,f,i,o,s,u,c,function(n){m.call(this,t,n)},function(n){m.call(this,t,n)}]}class Zt extends V{constructor(t){super(),z(this,t,Qt,Kt,o,{x:2,y:3,r:4,showOutline:5,active:6})}}const tn=[[22,1,21],[23,2,0,22],[24,3,1,23],[25,4,2,24],[26,5,3,25],[27,6,4,26],[28,7,5,27],[29,8,6,28],[30,9,7,29],[31,10,8,30],[32,11,9,31],[33,12,10,32],[34,13,11,33],[35,14,12,34],[36,15,13,35],[37,16,14,36],[38,17,15,37],[39,18,16,38],[40,19,17,39],[41,20,18,40],[42,19,41],[44,22,0,43],[45,23,1,0,21,44],[46,24,2,1,22,45],[47,25,3,2,23,46],[48,26,4,3,24,47],[49,27,5,4,25,48],[50,28,6,5,26,49],[51,29,7,6,27,50],[52,30,8,7,28,51],[53,31,9,8,29,52],[54,32,10,9,30,53],[55,33,11,10,31,54],[56,34,12,11,32,55],[57,35,13,12,33,56],[58,36,14,13,34,57],[59,37,15,14,35,58],[60,38,16,15,36,59],[61,39,17,16,37,60],[62,40,18,17,38,61],[63,41,19,18,39,62],[64,42,20,19,40,63],[65,20,41,64],[67,44,21,66],[68,45,22,21,43,67],[69,46,23,22,44,68],[70,47,24,23,45,69],[71,48,25,24,46,70],[72,49,26,25,47,71],[73,50,27,26,48,72],[74,51,28,27,49,73],[75,52,29,28,50,74],[76,53,30,29,51,75],[77,54,31,30,52,76],[78,55,32,31,53,77],[79,56,33,32,54,78],[80,57,34,33,55,79],[81,58,35,34,56,80],[82,59,36,35,57,81],[83,60,37,36,58,82],[84,61,38,37,59,83],[85,62,39,38,60,84],[86,63,40,39,61,85],[87,64,41,40,62,86],[88,65,42,41,63,87],[89,42,64,88],[91,67,43,90],[92,68,44,43,66,91],[93,69,45,44,67,92],[94,70,46,45,68,93],[95,71,47,46,69,94],[96,72,48,47,70,95],[97,73,49,48,71,96],[98,74,50,49,72,97],[99,75,51,50,73,98],[100,76,52,51,74,99],[101,77,53,52,75,100],[102,78,54,53,76,101],[103,79,55,54,77,102],[104,80,56,55,78,103],[105,81,57,56,79,104],[106,82,58,57,80,105],[107,83,59,58,81,106],[108,84,60,59,82,107],[109,85,61,60,83,108],[110,86,62,61,84,109],[111,87,63,62,85,110],[112,88,64,63,86,111],[113,89,65,64,87,112],[114,65,88,113],[116,91,66,115],[117,92,67,66,90,116],[118,93,68,67,91,117],[119,94,69,68,92,118],[120,95,70,69,93,119],[121,96,71,70,94,120],[122,97,72,71,95,121],[123,98,73,72,96,122],[124,99,74,73,97,123],[125,100,75,74,98,124],[126,101,76,75,99,125],[127,102,77,76,100,126],[128,103,78,77,101,127],[129,104,79,78,102,128],[130,105,80,79,103,129],[131,106,81,80,104,130],[132,107,82,81,105,131],[133,108,83,82,106,132],[134,109,84,83,107,133],[135,110,85,84,108,134],[136,111,86,85,109,135],[137,112,87,86,110,136],[138,113,88,87,111,137],[139,114,89,88,112,138],[140,89,113,139],[142,116,90,141],[143,117,91,90,115,142],[144,118,92,91,116,143],[145,119,93,92,117,144],[146,120,94,93,118,145],[147,121,95,94,119,146],[148,122,96,95,120,147],[149,123,97,96,121,148],[150,124,98,97,122,149],[151,125,99,98,123,150],[152,126,100,99,124,151],[153,127,101,100,125,152],[154,128,102,101,126,153],[155,129,103,102,127,154],[156,130,104,103,128,155],[157,131,105,104,129,156],[158,132,106,105,130,157],[159,133,107,106,131,158],[160,134,108,107,132,159],[161,135,109,108,133,160],[162,136,110,109,134,161],[163,137,111,110,135,162],[164,138,112,111,136,163],[165,139,113,112,137,164],[166,140,114,113,138,165],[167,114,139,166],[169,142,115,168],[170,143,116,115,141,169],[171,144,117,116,142,170],[172,145,118,117,143,171],[173,146,119,118,144,172],[174,147,120,119,145,173],[175,148,121,120,146,174],[176,149,122,121,147,175],[177,150,123,122,148,176],[178,151,124,123,149,177],[179,152,125,124,150,178],[180,153,126,125,151,179],[181,154,127,126,152,180],[182,155,128,127,153,181],[183,156,129,128,154,182],[184,157,130,129,155,183],[185,158,131,130,156,184],[186,159,132,131,157,185],[187,160,133,132,158,186],[188,161,134,133,159,187],[189,162,135,134,160,188],[190,163,136,135,161,189],[191,164,137,136,162,190],[192,165,138,137,163,191],[193,166,139,138,164,192],[194,167,140,139,165,193],[195,140,166,194],[197,169,141,196],[198,170,142,141,168,197],[199,171,143,142,169,198],[200,172,144,143,170,199],[201,173,145,144,171,200],[202,174,146,145,172,201],[203,175,147,146,173,202],[204,176,148,147,174,203],[205,177,149,148,175,204],[206,178,150,149,176,205],[207,179,151,150,177,206],[208,180,152,151,178,207],[209,181,153,152,179,208],[210,182,154,153,180,209],[211,183,155,154,181,210],[212,184,156,155,182,211],[213,185,157,156,183,212],[214,186,158,157,184,213],[215,187,159,158,185,214],[216,188,160,159,186,215],[217,189,161,160,187,216],[218,190,162,161,188,217],[219,191,163,162,189,218],[220,192,164,163,190,219],[221,193,165,164,191,220],[222,194,166,165,192,221],[223,195,167,166,193,222],[224,167,194,223],[226,197,168,225],[227,198,169,168,196,226],[228,199,170,169,197,227],[229,200,171,170,198,228],[230,201,172,171,199,229],[231,202,173,172,200,230],[232,203,174,173,201,231],[233,204,175,174,202,232],[234,205,176,175,203,233],[235,206,177,176,204,234],[236,207,178,177,205,235],[237,208,179,178,206,236],[238,209,180,179,207,237],[239,210,181,180,208,238],[240,211,182,181,209,239],[241,212,183,182,210,240],[242,213,184,183,211,241],[243,214,185,184,212,242],[244,215,186,185,213,243],[245,216,187,186,214,244],[246,217,188,187,215,245],[247,218,189,188,216,246],[248,219,190,189,217,247],[249,220,191,190,218,248],[250,221,192,191,219,249],[251,222,193,192,220,250],[252,223,194,193,221,251],[253,224,195,194,222,252],[254,195,223,253],[256,226,196,255],[257,227,197,196,225,256],[258,228,198,197,226,257],[259,229,199,198,227,258],[260,230,200,199,228,259],[261,231,201,200,229,260],[262,232,202,201,230,261],[263,233,203,202,231,262],[264,234,204,203,232,263],[265,235,205,204,233,264],[266,236,206,205,234,265],[267,237,207,206,235,266],[268,238,208,207,236,267],[269,239,209,208,237,268],[270,240,210,209,238,269],[271,241,211,210,239,270],[272,242,212,211,240,271],[273,243,213,212,241,272],[274,244,214,213,242,273],[275,245,215,214,243,274],[276,246,216,215,244,275],[277,247,217,216,245,276],[278,248,218,217,246,277],[279,249,219,218,247,278],[280,250,220,219,248,279],[281,251,221,220,249,280],[282,252,222,221,250,281],[283,253,223,222,251,282],[284,254,224,223,252,283],[285,224,253,284],[287,256,225,286],[288,257,226,225,255,287],[289,258,227,226,256,288],[290,259,228,227,257,289],[291,260,229,228,258,290],[292,261,230,229,259,291],[293,262,231,230,260,292],[294,263,232,231,261,293],[295,264,233,232,262,294],[296,265,234,233,263,295],[297,266,235,234,264,296],[298,267,236,235,265,297],[299,268,237,236,266,298],[300,269,238,237,267,299],[301,270,239,238,268,300],[302,271,240,239,269,301],[303,272,241,240,270,302],[304,273,242,241,271,303],[305,274,243,242,272,304],[306,275,244,243,273,305],[307,276,245,244,274,306],[308,277,246,245,275,307],[309,278,247,246,276,308],[310,279,248,247,277,309],[311,280,249,248,278,310],[312,281,250,249,279,311],[313,282,251,250,280,312],[314,283,252,251,281,313],[315,284,253,252,282,314],[316,285,254,253,283,315],[317,254,284,316],[319,287,255,318],[320,288,256,255,286,319],[321,289,257,256,287,320],[322,290,258,257,288,321],[323,291,259,258,289,322],[324,292,260,259,290,323],[325,293,261,260,291,324],[326,294,262,261,292,325],[327,295,263,262,293,326],[328,296,264,263,294,327],[329,297,265,264,295,328],[330,298,266,265,296,329],[331,299,267,266,297,330],[332,300,268,267,298,331],[333,301,269,268,299,332],[334,302,270,269,300,333],[335,303,271,270,301,334],[336,304,272,271,302,335],[337,305,273,272,303,336],[338,306,274,273,304,337],[339,307,275,274,305,338],[340,308,276,275,306,339],[341,309,277,276,307,340],[342,310,278,277,308,341],[343,311,279,278,309,342],[344,312,280,279,310,343],[345,313,281,280,311,344],[346,314,282,281,312,345],[347,315,283,282,313,346],[348,316,284,283,314,347],[349,317,285,284,315,348],[350,285,316,349],[352,319,286,351],[353,320,287,286,318,352],[354,321,288,287,319,353],[355,322,289,288,320,354],[356,323,290,289,321,355],[357,324,291,290,322,356],[358,325,292,291,323,357],[359,326,293,292,324,358],[360,327,294,293,325,359],[361,328,295,294,326,360],[362,329,296,295,327,361],[363,330,297,296,328,362],[364,331,298,297,329,363],[365,332,299,298,330,364],[366,333,300,299,331,365],[367,334,301,300,332,366],[368,335,302,301,333,367],[369,336,303,302,334,368],[370,337,304,303,335,369],[371,338,305,304,336,370],[372,339,306,305,337,371],[373,340,307,306,338,372],[374,341,308,307,339,373],[375,342,309,308,340,374],[376,343,310,309,341,375],[377,344,311,310,342,376],[378,345,312,311,343,377],[379,346,313,312,344,378],[380,347,314,313,345,379],[381,348,315,314,346,380],[382,349,316,315,347,381],[383,350,317,316,348,382],[384,317,349,383],[386,352,318,385],[387,353,319,318,351,386],[388,354,320,319,352,387],[389,355,321,320,353,388],[390,356,322,321,354,389],[391,357,323,322,355,390],[392,358,324,323,356,391],[393,359,325,324,357,392],[394,360,326,325,358,393],[395,361,327,326,359,394],[396,362,328,327,360,395],[397,363,329,328,361,396],[398,364,330,329,362,397],[399,365,331,330,363,398],[400,366,332,331,364,399],[401,367,333,332,365,400],[402,368,334,333,366,401],[403,369,335,334,367,402],[404,370,336,335,368,403],[405,371,337,336,369,404],[406,372,338,337,370,405],[407,373,339,338,371,406],[408,374,340,339,372,407],[409,375,341,340,373,408],[410,376,342,341,374,409],[411,377,343,342,375,410],[412,378,344,343,376,411],[413,379,345,344,377,412],[414,380,346,345,378,413],[415,381,347,346,379,414],[416,382,348,347,380,415],[417,383,349,348,381,416],[418,384,350,349,382,417],[419,350,383,418],[421,386,351,420],[422,387,352,351,385,421],[423,388,353,352,386,422],[424,389,354,353,387,423],[425,390,355,354,388,424],[426,391,356,355,389,425],[427,392,357,356,390,426],[428,393,358,357,391,427],[429,394,359,358,392,428],[430,395,360,359,393,429],[431,396,361,360,394,430],[432,397,362,361,395,431],[433,398,363,362,396,432],[434,399,364,363,397,433],[435,400,365,364,398,434],[436,401,366,365,399,435],[437,402,367,366,400,436],[438,403,368,367,401,437],[439,404,369,368,402,438],[440,405,370,369,403,439],[441,406,371,370,404,440],[442,407,372,371,405,441],[443,408,373,372,406,442],[444,409,374,373,407,443],[445,410,375,374,408,444],[446,411,376,375,409,445],[447,412,377,376,410,446],[448,413,378,377,411,447],[449,414,379,378,412,448],[450,415,380,379,413,449],[451,416,381,380,414,450],[452,417,382,381,415,451],[453,418,383,382,416,452],[454,419,384,383,417,453],[455,384,418,454],[457,421,385,456],[458,422,386,385,420,457],[459,423,387,386,421,458],[460,424,388,387,422,459],[461,425,389,388,423,460],[462,426,390,389,424,461],[463,427,391,390,425,462],[464,428,392,391,426,463],[465,429,393,392,427,464],[466,430,394,393,428,465],[467,431,395,394,429,466],[468,432,396,395,430,467],[469,433,397,396,431,468],[470,434,398,397,432,469],[471,435,399,398,433,470],[472,436,400,399,434,471],[473,437,401,400,435,472],[474,438,402,401,436,473],[475,439,403,402,437,474],[476,440,404,403,438,475],[477,441,405,404,439,476],[478,442,406,405,440,477],[479,443,407,406,441,478],[480,444,408,407,442,479],[481,445,409,408,443,480],[482,446,410,409,444,481],[483,447,411,410,445,482],[484,448,412,411,446,483],[485,449,413,412,447,484],[486,450,414,413,448,485],[487,451,415,414,449,486],[488,452,416,415,450,487],[489,453,417,416,451,488],[490,454,418,417,452,489],[491,455,419,418,453,490],[492,419,454,491],[494,457,420,493],[495,458,421,420,456,494],[496,459,422,421,457,495],[497,460,423,422,458,496],[498,461,424,423,459,497],[499,462,425,424,460,498],[500,463,426,425,461,499],[501,464,427,426,462,500],[502,465,428,427,463,501],[503,466,429,428,464,502],[504,467,430,429,465,503],[505,468,431,430,466,504],[506,469,432,431,467,505],[507,470,433,432,468,506],[508,471,434,433,469,507],[509,472,435,434,470,508],[510,473,436,435,471,509],[511,474,437,436,472,510],[512,475,438,437,473,511],[513,476,439,438,474,512],[514,477,440,439,475,513],[515,478,441,440,476,514],[516,479,442,441,477,515],[517,480,443,442,478,516],[518,481,444,443,479,517],[519,482,445,444,480,518],[520,483,446,445,481,519],[521,484,447,446,482,520],[522,485,448,447,483,521],[523,486,449,448,484,522],[524,487,450,449,485,523],[525,488,451,450,486,524],[526,489,452,451,487,525],[527,490,453,452,488,526],[528,491,454,453,489,527],[529,492,455,454,490,528],[530,455,491,529],[532,494,456,531],[533,495,457,456,493,532],[534,496,458,457,494,533],[535,497,459,458,495,534],[536,498,460,459,496,535],[537,499,461,460,497,536],[538,500,462,461,498,537],[539,501,463,462,499,538],[540,502,464,463,500,539],[541,503,465,464,501,540],[542,504,466,465,502,541],[543,505,467,466,503,542],[544,506,468,467,504,543],[545,507,469,468,505,544],[546,508,470,469,506,545],[547,509,471,470,507,546],[548,510,472,471,508,547],[549,511,473,472,509,548],[550,512,474,473,510,549],[551,513,475,474,511,550],[552,514,476,475,512,551],[553,515,477,476,513,552],[554,516,478,477,514,553],[555,517,479,478,515,554],[556,518,480,479,516,555],[557,519,481,480,517,556],[558,520,482,481,518,557],[559,521,483,482,519,558],[560,522,484,483,520,559],[561,523,485,484,521,560],[562,524,486,485,522,561],[563,525,487,486,523,562],[564,526,488,487,524,563],[565,527,489,488,525,564],[566,528,490,489,526,565],[567,529,491,490,527,566],[568,530,492,491,528,567],[569,492,529,568],[571,532,493,570],[572,533,494,493,531,571],[573,534,495,494,532,572],[574,535,496,495,533,573],[575,536,497,496,534,574],[576,537,498,497,535,575],[577,538,499,498,536,576],[578,539,500,499,537,577],[579,540,501,500,538,578],[580,541,502,501,539,579],[581,542,503,502,540,580],[582,543,504,503,541,581],[583,544,505,504,542,582],[584,545,506,505,543,583],[585,546,507,506,544,584],[586,547,508,507,545,585],[587,548,509,508,546,586],[588,549,510,509,547,587],[589,550,511,510,548,588],[590,551,512,511,549,589],[591,552,513,512,550,590],[592,553,514,513,551,591],[593,554,515,514,552,592],[594,555,516,515,553,593],[595,556,517,516,554,594],[596,557,518,517,555,595],[597,558,519,518,556,596],[598,559,520,519,557,597],[599,560,521,520,558,598],[600,561,522,521,559,599],[601,562,523,522,560,600],[602,563,524,523,561,601],[603,564,525,524,562,602],[604,565,526,525,563,603],[605,566,527,526,564,604],[606,567,528,527,565,605],[607,568,529,528,566,606],[608,569,530,529,567,607],[609,530,568,608],[611,571,531,610],[612,572,532,531,570,611],[613,573,533,532,571,612],[614,574,534,533,572,613],[615,575,535,534,573,614],[616,576,536,535,574,615],[617,577,537,536,575,616],[618,578,538,537,576,617],[619,579,539,538,577,618],[620,580,540,539,578,619],[621,581,541,540,579,620],[622,582,542,541,580,621],[623,583,543,542,581,622],[624,584,544,543,582,623],[625,585,545,544,583,624],[626,586,546,545,584,625],[627,587,547,546,585,626],[628,588,548,547,586,627],[629,589,549,548,587,628],[630,590,550,549,588,629],[631,591,551,550,589,630],[632,592,552,551,590,631],[633,593,553,552,591,632],[634,594,554,553,592,633],[635,595,555,554,593,634],[636,596,556,555,594,635],[637,597,557,556,595,636],[638,598,558,557,596,637],[639,599,559,558,597,638],[640,600,560,559,598,639],[641,601,561,560,599,640],[642,602,562,561,600,641],[643,603,563,562,601,642],[644,604,564,563,602,643],[645,605,565,564,603,644],[646,606,566,565,604,645],[647,607,567,566,605,646],[648,608,568,567,606,647],[649,609,569,568,607,648],[650,569,608,649],[651,611,570],[652,612,571,570,610,651],[653,613,572,571,611,652],[654,614,573,572,612,653],[655,615,574,573,613,654],[656,616,575,574,614,655],[657,617,576,575,615,656],[658,618,577,576,616,657],[659,619,578,577,617,658],[660,620,579,578,618,659],[661,621,580,579,619,660],[662,622,581,580,620,661],[663,623,582,581,621,662],[664,624,583,582,622,663],[665,625,584,583,623,664],[666,626,585,584,624,665],[667,627,586,585,625,666],[668,628,587,586,626,667],[669,629,588,587,627,668],[670,630,589,588,628,669],[671,631,590,589,629,670],[672,632,591,590,630,671],[673,633,592,591,631,672],[674,634,593,592,632,673],[675,635,594,593,633,674],[676,636,595,594,634,675],[677,637,596,595,635,676],[678,638,597,596,636,677],[679,639,598,597,637,678],[680,640,599,598,638,679],[681,641,600,599,639,680],[682,642,601,600,640,681],[683,643,602,601,641,682],[684,644,603,602,642,683],[685,645,604,603,643,684],[686,646,605,604,644,685],[687,647,606,605,645,686],[688,648,607,606,646,687],[689,649,608,607,647,688],[690,650,609,608,648,689],[609,649,690],[691,652,611,610],[692,653,612,611,651,691],[693,654,613,612,652,692],[694,655,614,613,653,693],[695,656,615,614,654,694],[696,657,616,615,655,695],[697,658,617,616,656,696],[698,659,618,617,657,697],[699,660,619,618,658,698],[700,661,620,619,659,699],[701,662,621,620,660,700],[702,663,622,621,661,701],[703,664,623,622,662,702],[704,665,624,623,663,703],[705,666,625,624,664,704],[706,667,626,625,665,705],[707,668,627,626,666,706],[708,669,628,627,667,707],[709,670,629,628,668,708],[710,671,630,629,669,709],[711,672,631,630,670,710],[712,673,632,631,671,711],[713,674,633,632,672,712],[714,675,634,633,673,713],[715,676,635,634,674,714],[716,677,636,635,675,715],[717,678,637,636,676,716],[718,679,638,637,677,717],[719,680,639,638,678,718],[720,681,640,639,679,719],[721,682,641,640,680,720],[722,683,642,641,681,721],[723,684,643,642,682,722],[724,685,644,643,683,723],[725,686,645,644,684,724],[726,687,646,645,685,725],[727,688,647,646,686,726],[728,689,648,647,687,727],[729,690,649,648,688,728],[650,649,689,729],[730,692,652,651],[731,693,653,652,691,730],[732,694,654,653,692,731],[733,695,655,654,693,732],[734,696,656,655,694,733],[735,697,657,656,695,734],[736,698,658,657,696,735],[737,699,659,658,697,736],[738,700,660,659,698,737],[739,701,661,660,699,738],[740,702,662,661,700,739],[741,703,663,662,701,740],[742,704,664,663,702,741],[743,705,665,664,703,742],[744,706,666,665,704,743],[745,707,667,666,705,744],[746,708,668,667,706,745],[747,709,669,668,707,746],[748,710,670,669,708,747],[749,711,671,670,709,748],[750,712,672,671,710,749],[751,713,673,672,711,750],[752,714,674,673,712,751],[753,715,675,674,713,752],[754,716,676,675,714,753],[755,717,677,676,715,754],[756,718,678,677,716,755],[757,719,679,678,717,756],[758,720,680,679,718,757],[759,721,681,680,719,758],[760,722,682,681,720,759],[761,723,683,682,721,760],[762,724,684,683,722,761],[763,725,685,684,723,762],[764,726,686,685,724,763],[765,727,687,686,725,764],[766,728,688,687,726,765],[767,729,689,688,727,766],[690,689,728,767],[768,731,692,691],[769,732,693,692,730,768],[770,733,694,693,731,769],[771,734,695,694,732,770],[772,735,696,695,733,771],[773,736,697,696,734,772],[774,737,698,697,735,773],[775,738,699,698,736,774],[776,739,700,699,737,775],[777,740,701,700,738,776],[778,741,702,701,739,777],[779,742,703,702,740,778],[780,743,704,703,741,779],[781,744,705,704,742,780],[782,745,706,705,743,781],[783,746,707,706,744,782],[784,747,708,707,745,783],[785,748,709,708,746,784],[786,749,710,709,747,785],[787,750,711,710,748,786],[788,751,712,711,749,787],[789,752,713,712,750,788],[790,753,714,713,751,789],[791,754,715,714,752,790],[792,755,716,715,753,791],[793,756,717,716,754,792],[794,757,718,717,755,793],[795,758,719,718,756,794],[796,759,720,719,757,795],[797,760,721,720,758,796],[798,761,722,721,759,797],[799,762,723,722,760,798],[800,763,724,723,761,799],[801,764,725,724,762,800],[802,765,726,725,763,801],[803,766,727,726,764,802],[804,767,728,727,765,803],[729,728,766,804],[805,769,731,730],[806,770,732,731,768,805],[807,771,733,732,769,806],[808,772,734,733,770,807],[809,773,735,734,771,808],[810,774,736,735,772,809],[811,775,737,736,773,810],[812,776,738,737,774,811],[813,777,739,738,775,812],[814,778,740,739,776,813],[815,779,741,740,777,814],[816,780,742,741,778,815],[817,781,743,742,779,816],[818,782,744,743,780,817],[819,783,745,744,781,818],[820,784,746,745,782,819],[821,785,747,746,783,820],[822,786,748,747,784,821],[823,787,749,748,785,822],[824,788,750,749,786,823],[825,789,751,750,787,824],[826,790,752,751,788,825],[827,791,753,752,789,826],[828,792,754,753,790,827],[829,793,755,754,791,828],[830,794,756,755,792,829],[831,795,757,756,793,830],[832,796,758,757,794,831],[833,797,759,758,795,832],[834,798,760,759,796,833],[835,799,761,760,797,834],[836,800,762,761,798,835],[837,801,763,762,799,836],[838,802,764,763,800,837],[839,803,765,764,801,838],[840,804,766,765,802,839],[767,766,803,840],[841,806,769,768],[842,807,770,769,805,841],[843,808,771,770,806,842],[844,809,772,771,807,843],[845,810,773,772,808,844],[846,811,774,773,809,845],[847,812,775,774,810,846],[848,813,776,775,811,847],[849,814,777,776,812,848],[850,815,778,777,813,849],[851,816,779,778,814,850],[852,817,780,779,815,851],[853,818,781,780,816,852],[854,819,782,781,817,853],[855,820,783,782,818,854],[856,821,784,783,819,855],[857,822,785,784,820,856],[858,823,786,785,821,857],[859,824,787,786,822,858],[860,825,788,787,823,859],[861,826,789,788,824,860],[862,827,790,789,825,861],[863,828,791,790,826,862],[864,829,792,791,827,863],[865,830,793,792,828,864],[866,831,794,793,829,865],[867,832,795,794,830,866],[868,833,796,795,831,867],[869,834,797,796,832,868],[870,835,798,797,833,869],[871,836,799,798,834,870],[872,837,800,799,835,871],[873,838,801,800,836,872],[874,839,802,801,837,873],[875,840,803,802,838,874],[804,803,839,875],[876,842,806,805],[877,843,807,806,841,876],[878,844,808,807,842,877],[879,845,809,808,843,878],[880,846,810,809,844,879],[881,847,811,810,845,880],[882,848,812,811,846,881],[883,849,813,812,847,882],[884,850,814,813,848,883],[885,851,815,814,849,884],[886,852,816,815,850,885],[887,853,817,816,851,886],[888,854,818,817,852,887],[889,855,819,818,853,888],[890,856,820,819,854,889],[891,857,821,820,855,890],[892,858,822,821,856,891],[893,859,823,822,857,892],[894,860,824,823,858,893],[895,861,825,824,859,894],[896,862,826,825,860,895],[897,863,827,826,861,896],[898,864,828,827,862,897],[899,865,829,828,863,898],[900,866,830,829,864,899],[901,867,831,830,865,900],[902,868,832,831,866,901],[903,869,833,832,867,902],[904,870,834,833,868,903],[905,871,835,834,869,904],[906,872,836,835,870,905],[907,873,837,836,871,906],[908,874,838,837,872,907],[909,875,839,838,873,908],[840,839,874,909],[910,877,842,841],[911,878,843,842,876,910],[912,879,844,843,877,911],[913,880,845,844,878,912],[914,881,846,845,879,913],[915,882,847,846,880,914],[916,883,848,847,881,915],[917,884,849,848,882,916],[918,885,850,849,883,917],[919,886,851,850,884,918],[920,887,852,851,885,919],[921,888,853,852,886,920],[922,889,854,853,887,921],[923,890,855,854,888,922],[924,891,856,855,889,923],[925,892,857,856,890,924],[926,893,858,857,891,925],[927,894,859,858,892,926],[928,895,860,859,893,927],[929,896,861,860,894,928],[930,897,862,861,895,929],[931,898,863,862,896,930],[932,899,864,863,897,931],[933,900,865,864,898,932],[934,901,866,865,899,933],[935,902,867,866,900,934],[936,903,868,867,901,935],[937,904,869,868,902,936],[938,905,870,869,903,937],[939,906,871,870,904,938],[940,907,872,871,905,939],[941,908,873,872,906,940],[942,909,874,873,907,941],[875,874,908,942],[943,911,877,876],[944,912,878,877,910,943],[945,913,879,878,911,944],[946,914,880,879,912,945],[947,915,881,880,913,946],[948,916,882,881,914,947],[949,917,883,882,915,948],[950,918,884,883,916,949],[951,919,885,884,917,950],[952,920,886,885,918,951],[953,921,887,886,919,952],[954,922,888,887,920,953],[955,923,889,888,921,954],[956,924,890,889,922,955],[957,925,891,890,923,956],[958,926,892,891,924,957],[959,927,893,892,925,958],[960,928,894,893,926,959],[961,929,895,894,927,960],[962,930,896,895,928,961],[963,931,897,896,929,962],[964,932,898,897,930,963],[965,933,899,898,931,964],[966,934,900,899,932,965],[967,935,901,900,933,966],[968,936,902,901,934,967],[969,937,903,902,935,968],[970,938,904,903,936,969],[971,939,905,904,937,970],[972,940,906,905,938,971],[973,941,907,906,939,972],[974,942,908,907,940,973],[909,908,941,974],[975,944,911,910],[976,945,912,911,943,975],[977,946,913,912,944,976],[978,947,914,913,945,977],[979,948,915,914,946,978],[980,949,916,915,947,979],[981,950,917,916,948,980],[982,951,918,917,949,981],[983,952,919,918,950,982],[984,953,920,919,951,983],[985,954,921,920,952,984],[986,955,922,921,953,985],[987,956,923,922,954,986],[988,957,924,923,955,987],[989,958,925,924,956,988],[990,959,926,925,957,989],[991,960,927,926,958,990],[992,961,928,927,959,991],[993,962,929,928,960,992],[994,963,930,929,961,993],[995,964,931,930,962,994],[996,965,932,931,963,995],[997,966,933,932,964,996],[998,967,934,933,965,997],[999,968,935,934,966,998],[1e3,969,936,935,967,999],[1001,970,937,936,968,1e3],[1002,971,938,937,969,1001],[1003,972,939,938,970,1002],[1004,973,940,939,971,1003],[1005,974,941,940,972,1004],[942,941,973,1005],[1006,976,944,943],[1007,977,945,944,975,1006],[1008,978,946,945,976,1007],[1009,979,947,946,977,1008],[1010,980,948,947,978,1009],[1011,981,949,948,979,1010],[1012,982,950,949,980,1011],[1013,983,951,950,981,1012],[1014,984,952,951,982,1013],[1015,985,953,952,983,1014],[1016,986,954,953,984,1015],[1017,987,955,954,985,1016],[1018,988,956,955,986,1017],[1019,989,957,956,987,1018],[1020,990,958,957,988,1019],[1021,991,959,958,989,1020],[1022,992,960,959,990,1021],[1023,993,961,960,991,1022],[1024,994,962,961,992,1023],[1025,995,963,962,993,1024],[1026,996,964,963,994,1025],[1027,997,965,964,995,1026],[1028,998,966,965,996,1027],[1029,999,967,966,997,1028],[1030,1e3,968,967,998,1029],[1031,1001,969,968,999,1030],[1032,1002,970,969,1e3,1031],[1033,1003,971,970,1001,1032],[1034,1004,972,971,1002,1033],[1035,1005,973,972,1003,1034],[974,973,1004,1035],[1036,1007,976,975],[1037,1008,977,976,1006,1036],[1038,1009,978,977,1007,1037],[1039,1010,979,978,1008,1038],[1040,1011,980,979,1009,1039],[1041,1012,981,980,1010,1040],[1042,1013,982,981,1011,1041],[1043,1014,983,982,1012,1042],[1044,1015,984,983,1013,1043],[1045,1016,985,984,1014,1044],[1046,1017,986,985,1015,1045],[1047,1018,987,986,1016,1046],[1048,1019,988,987,1017,1047],[1049,1020,989,988,1018,1048],[1050,1021,990,989,1019,1049],[1051,1022,991,990,1020,1050],[1052,1023,992,991,1021,1051],[1053,1024,993,992,1022,1052],[1054,1025,994,993,1023,1053],[1055,1026,995,994,1024,1054],[1056,1027,996,995,1025,1055],[1057,1028,997,996,1026,1056],[1058,1029,998,997,1027,1057],[1059,1030,999,998,1028,1058],[1060,1031,1e3,999,1029,1059],[1061,1032,1001,1e3,1030,1060],[1062,1033,1002,1001,1031,1061],[1063,1034,1003,1002,1032,1062],[1064,1035,1004,1003,1033,1063],[1005,1004,1034,1064],[1065,1037,1007,1006],[1066,1038,1008,1007,1036,1065],[1067,1039,1009,1008,1037,1066],[1068,1040,1010,1009,1038,1067],[1069,1041,1011,1010,1039,1068],[1070,1042,1012,1011,1040,1069],[1071,1043,1013,1012,1041,1070],[1072,1044,1014,1013,1042,1071],[1073,1045,1015,1014,1043,1072],[1074,1046,1016,1015,1044,1073],[1075,1047,1017,1016,1045,1074],[1076,1048,1018,1017,1046,1075],[1077,1049,1019,1018,1047,1076],[1078,1050,1020,1019,1048,1077],[1079,1051,1021,1020,1049,1078],[1080,1052,1022,1021,1050,1079],[1081,1053,1023,1022,1051,1080],[1082,1054,1024,1023,1052,1081],[1083,1055,1025,1024,1053,1082],[1084,1056,1026,1025,1054,1083],[1085,1057,1027,1026,1055,1084],[1086,1058,1028,1027,1056,1085],[1087,1059,1029,1028,1057,1086],[1088,1060,1030,1029,1058,1087],[1089,1061,1031,1030,1059,1088],[1090,1062,1032,1031,1060,1089],[1091,1063,1033,1032,1061,1090],[1092,1064,1034,1033,1062,1091],[1035,1034,1063,1092],[1093,1066,1037,1036],[1094,1067,1038,1037,1065,1093],[1095,1068,1039,1038,1066,1094],[1096,1069,1040,1039,1067,1095],[1097,1070,1041,1040,1068,1096],[1098,1071,1042,1041,1069,1097],[1099,1072,1043,1042,1070,1098],[1100,1073,1044,1043,1071,1099],[1101,1074,1045,1044,1072,1100],[1102,1075,1046,1045,1073,1101],[1103,1076,1047,1046,1074,1102],[1104,1077,1048,1047,1075,1103],[1105,1078,1049,1048,1076,1104],[1106,1079,1050,1049,1077,1105],[1107,1080,1051,1050,1078,1106],[1108,1081,1052,1051,1079,1107],[1109,1082,1053,1052,1080,1108],[1110,1083,1054,1053,1081,1109],[1111,1084,1055,1054,1082,1110],[1112,1085,1056,1055,1083,1111],[1113,1086,1057,1056,1084,1112],[1114,1087,1058,1057,1085,1113],[1115,1088,1059,1058,1086,1114],[1116,1089,1060,1059,1087,1115],[1117,1090,1061,1060,1088,1116],[1118,1091,1062,1061,1089,1117],[1119,1092,1063,1062,1090,1118],[1064,1063,1091,1119],[1120,1094,1066,1065],[1121,1095,1067,1066,1093,1120],[1122,1096,1068,1067,1094,1121],[1123,1097,1069,1068,1095,1122],[1124,1098,1070,1069,1096,1123],[1125,1099,1071,1070,1097,1124],[1126,1100,1072,1071,1098,1125],[1127,1101,1073,1072,1099,1126],[1128,1102,1074,1073,1100,1127],[1129,1103,1075,1074,1101,1128],[1130,1104,1076,1075,1102,1129],[1131,1105,1077,1076,1103,1130],[1132,1106,1078,1077,1104,1131],[1133,1107,1079,1078,1105,1132],[1134,1108,1080,1079,1106,1133],[1135,1109,1081,1080,1107,1134],[1136,1110,1082,1081,1108,1135],[1137,1111,1083,1082,1109,1136],[1138,1112,1084,1083,1110,1137],[1139,1113,1085,1084,1111,1138],[1140,1114,1086,1085,1112,1139],[1141,1115,1087,1086,1113,1140],[1142,1116,1088,1087,1114,1141],[1143,1117,1089,1088,1115,1142],[1144,1118,1090,1089,1116,1143],[1145,1119,1091,1090,1117,1144],[1092,1091,1118,1145],[1146,1121,1094,1093],[1147,1122,1095,1094,1120,1146],[1148,1123,1096,1095,1121,1147],[1149,1124,1097,1096,1122,1148],[1150,1125,1098,1097,1123,1149],[1151,1126,1099,1098,1124,1150],[1152,1127,1100,1099,1125,1151],[1153,1128,1101,1100,1126,1152],[1154,1129,1102,1101,1127,1153],[1155,1130,1103,1102,1128,1154],[1156,1131,1104,1103,1129,1155],[1157,1132,1105,1104,1130,1156],[1158,1133,1106,1105,1131,1157],[1159,1134,1107,1106,1132,1158],[1160,1135,1108,1107,1133,1159],[1161,1136,1109,1108,1134,1160],[1162,1137,1110,1109,1135,1161],[1163,1138,1111,1110,1136,1162],[1164,1139,1112,1111,1137,1163],[1165,1140,1113,1112,1138,1164],[1166,1141,1114,1113,1139,1165],[1167,1142,1115,1114,1140,1166],[1168,1143,1116,1115,1141,1167],[1169,1144,1117,1116,1142,1168],[1170,1145,1118,1117,1143,1169],[1119,1118,1144,1170],[1171,1147,1121,1120],[1172,1148,1122,1121,1146,1171],[1173,1149,1123,1122,1147,1172],[1174,1150,1124,1123,1148,1173],[1175,1151,1125,1124,1149,1174],[1176,1152,1126,1125,1150,1175],[1177,1153,1127,1126,1151,1176],[1178,1154,1128,1127,1152,1177],[1179,1155,1129,1128,1153,1178],[1180,1156,1130,1129,1154,1179],[1181,1157,1131,1130,1155,1180],[1182,1158,1132,1131,1156,1181],[1183,1159,1133,1132,1157,1182],[1184,1160,1134,1133,1158,1183],[1185,1161,1135,1134,1159,1184],[1186,1162,1136,1135,1160,1185],[1187,1163,1137,1136,1161,1186],[1188,1164,1138,1137,1162,1187],[1189,1165,1139,1138,1163,1188],[1190,1166,1140,1139,1164,1189],[1191,1167,1141,1140,1165,1190],[1192,1168,1142,1141,1166,1191],[1193,1169,1143,1142,1167,1192],[1194,1170,1144,1143,1168,1193],[1145,1144,1169,1194],[1195,1172,1147,1146],[1196,1173,1148,1147,1171,1195],[1197,1174,1149,1148,1172,1196],[1198,1175,1150,1149,1173,1197],[1199,1176,1151,1150,1174,1198],[1200,1177,1152,1151,1175,1199],[1201,1178,1153,1152,1176,1200],[1202,1179,1154,1153,1177,1201],[1203,1180,1155,1154,1178,1202],[1204,1181,1156,1155,1179,1203],[1205,1182,1157,1156,1180,1204],[1206,1183,1158,1157,1181,1205],[1207,1184,1159,1158,1182,1206],[1208,1185,1160,1159,1183,1207],[1209,1186,1161,1160,1184,1208],[1210,1187,1162,1161,1185,1209],[1211,1188,1163,1162,1186,1210],[1212,1189,1164,1163,1187,1211],[1213,1190,1165,1164,1188,1212],[1214,1191,1166,1165,1189,1213],[1215,1192,1167,1166,1190,1214],[1216,1193,1168,1167,1191,1215],[1217,1194,1169,1168,1192,1216],[1170,1169,1193,1217],[1218,1196,1172,1171],[1219,1197,1173,1172,1195,1218],[1220,1198,1174,1173,1196,1219],[1221,1199,1175,1174,1197,1220],[1222,1200,1176,1175,1198,1221],[1223,1201,1177,1176,1199,1222],[1224,1202,1178,1177,1200,1223],[1225,1203,1179,1178,1201,1224],[1226,1204,1180,1179,1202,1225],[1227,1205,1181,1180,1203,1226],[1228,1206,1182,1181,1204,1227],[1229,1207,1183,1182,1205,1228],[1230,1208,1184,1183,1206,1229],[1231,1209,1185,1184,1207,1230],[1232,1210,1186,1185,1208,1231],[1233,1211,1187,1186,1209,1232],[1234,1212,1188,1187,1210,1233],[1235,1213,1189,1188,1211,1234],[1236,1214,1190,1189,1212,1235],[1237,1215,1191,1190,1213,1236],[1238,1216,1192,1191,1214,1237],[1239,1217,1193,1192,1215,1238],[1194,1193,1216,1239],[1240,1219,1196,1195],[1241,1220,1197,1196,1218,1240],[1242,1221,1198,1197,1219,1241],[1243,1222,1199,1198,1220,1242],[1244,1223,1200,1199,1221,1243],[1245,1224,1201,1200,1222,1244],[1246,1225,1202,1201,1223,1245],[1247,1226,1203,1202,1224,1246],[1248,1227,1204,1203,1225,1247],[1249,1228,1205,1204,1226,1248],[1250,1229,1206,1205,1227,1249],[1251,1230,1207,1206,1228,1250],[1252,1231,1208,1207,1229,1251],[1253,1232,1209,1208,1230,1252],[1254,1233,1210,1209,1231,1253],[1255,1234,1211,1210,1232,1254],[1256,1235,1212,1211,1233,1255],[1257,1236,1213,1212,1234,1256],[1258,1237,1214,1213,1235,1257],[1259,1238,1215,1214,1236,1258],[1260,1239,1216,1215,1237,1259],[1217,1216,1238,1260],[1241,1219,1218],[1242,1220,1219,1240],[1243,1221,1220,1241],[1244,1222,1221,1242],[1245,1223,1222,1243],[1246,1224,1223,1244],[1247,1225,1224,1245],[1248,1226,1225,1246],[1249,1227,1226,1247],[1250,1228,1227,1248],[1251,1229,1228,1249],[1252,1230,1229,1250],[1253,1231,1230,1251],[1254,1232,1231,1252],[1255,1233,1232,1253],[1256,1234,1233,1254],[1257,1235,1234,1255],[1258,1236,1235,1256],[1259,1237,1236,1257],[1260,1238,1237,1258],[1239,1238,1259]];var nn=function t(n){if("function"==typeof n)return n;var e=Array.isArray(n)?[]:{};for(var r in n){var i=n[r],o={}.toString.call(i).slice(8,-1);e[r]="Array"==o||"Object"==o?t(i):"Date"==o?new Date(i.getTime()):"RegExp"==o?RegExp(i.source,en(i)):i}return e};function en(t){if("string"==typeof t.source.flags)return t.source.flags;var n=[];return t.global&&n.push("g"),t.ignoreCase&&n.push("i"),t.multiline&&n.push("m"),t.sticky&&n.push("y"),t.unicode&&n.push("u"),n.join("")}function rn(t,n,e){const r=t.slice();return r[14]=n[e].hex,r[15]=n[e].point,r[16]=n,r[17]=e,r}function on(t){let n,e;return n=new Zt({props:{active:t[14].alive,showOutline:!t[0],r:cn,x:t[15].x+an/2,y:t[15].y+fn/2}}),n.$on("click",(function(){return t[7](t[14],t[16],t[17])})),{c(){k(n.$$.fragment)},m(t,r){T(n,t,r),e=!0},p(e,r){t=e;const i={};2&r&&(i.active=t[14].alive),1&r&&(i.showOutline=!t[0]),2&r&&(i.x=t[15].x+an/2),2&r&&(i.y=t[15].y+fn/2),n.$set(i)},i(t){e||(_(n.$$.fragment,t),e=!0)},o(t){R(n.$$.fragment,t),e=!1},d(t){D(n,t)}}}function sn(t){let n,e,i=t[1].map(ln),o=[];for(let n=0;n<i.length;n+=1)o[n]=on(rn(t,i,n));const s=t=>R(o[t],1,1,(()=>{o[t]=null}));return{c(){for(let t=0;t<o.length;t+=1)o[t].c();n=d("")},m(t,r){for(let n=0;n<o.length;n+=1)o[n].m(t,r);a(t,n,r),e=!0},p(t,e){if(7&e){let u;for(i=t[1].map(ln),u=0;u<i.length;u+=1){const r=rn(t,i,u);o[u]?(o[u].p(r,e),_(o[u],1)):(o[u]=on(r),o[u].c(),_(o[u],1),o[u].m(n.parentNode,n))}for(S={r:0,c:[],p:S},u=i.length;u<o.length;u+=1)s(u);S.r||r(S.c),S=S.p}},i(t){if(!e){for(let t=0;t<i.length;t+=1)_(o[t]);e=!0}},o(t){o=o.filter(Boolean);for(let t=0;t<o.length;t+=1)R(o[t]);e=!1},d(t){!function(t,n){for(let e=0;e<t.length;e+=1)t[e]&&t[e].d(n)}(o,t),t&&f(n)}}}function un(t){let n,e,i,o,s,u,h,g,y,$,m,b,w=t[0]?"stop":"play";return e=new I({props:{width:an,height:fn,$$slots:{default:[sn]},$$scope:{ctx:t}}}),{c(){n=l("main"),k(e.$$.fragment),i=p(),o=l("button"),s=d(w),u=p(),h=l("button"),h.textContent="clear",g=p(),y=l("button"),y.textContent="reset"},m(r,f){a(r,n,f),T(e,n,null),c(n,i),c(n,o),c(o,s),c(n,u),c(n,h),c(n,g),c(n,y),$=!0,m||(b=[x(o,"click",t[3]),x(h,"click",t[8]),x(y,"click",t[5])],m=!0)},p(t,[n]){const r={};262151&n&&(r.$$scope={dirty:n,ctx:t}),e.$set(r),(!$||1&n)&&w!==(w=t[0]?"stop":"play")&&function(t,n){n=""+n,t.wholeText!==n&&(t.data=n)}(s,w)},i(t){$||(_(e.$$.fragment,t),$=!0)},o(t){R(e.$$.fragment,t),$=!1},d(t){t&&f(n),D(e),m=!1,r(b)}}}const cn=10,an=1e3,fn=1e3,ln=t=>({hex:t,point:t.toPoint()});function hn(t,n,e){const r=[2],i=[2,4];let o,s=!1,u=null,c=[];function a(){e(1,o=function(t,n,e){const r=nn(t),i=t.map(((t,i)=>{const o=r[i],s=o.neighbors.map((t=>r[t])),u=s.filter((t=>t.alive));return!o.alive&&n.includes(u.length)?(t.alive=!0,t):(e.includes(u.length)||(t.alive=!1),t)}));return i}(o,r,i))}function f(t=!0){e(0,s=!1),e(1,o=Jt(cn,20)),e(2,c=t?[]:c),e(1,o=o.map(((t,n)=>(t.neighbors=tn[n],t))))}f();return t.$$.update=()=>{65&t.$$.dirty&&(s?e(6,u=setInterval(a,200)):null!==u&&(clearInterval(u),e(6,u=null)))},[s,o,c,function(){e(0,s=!s)},f,function(){f(!1),function(t){e(1,o=o.map(((n,e)=>(n.alive=t.includes(e),n))))}(c)},u,(t,n,r)=>{e(1,n[r].hex.alive=!t.alive,o),s||(t.alive?e(2,c=[...c,r]):e(2,c=c.filter((t=>t!==r))))},()=>f()]}return new class extends V{constructor(t){super(),z(this,t,hn,un,o,{})}}({target:document.body,props:{}})}();
//# sourceMappingURL=bundle.js.map
